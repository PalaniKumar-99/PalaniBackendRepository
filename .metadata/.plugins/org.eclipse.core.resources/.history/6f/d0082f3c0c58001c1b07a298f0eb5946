package com.book.example.demo;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.fail;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

@SpringBootTest(webEnvironment = WebEnvironment.MOCK)
@AutoConfigureMockMvc
@TestPropertySource("classpath:application.properties")
class BookFactoryApplicationTests {


		@Autowired
		private MockMvc mockMvc;

//		private RequestBuilder request;
		@Test 
		@Order(1)
		@DisplayName("Book Name")
		public void addBooksTest() throws Exception {

			//1.Create one Http Request

			MockHttpServletRequestBuilder request=
					MockMvcRequestBuilders.post("/books/save")
					.contentType(MediaType.APPLICATION_JSON)
					.content("{\"id\": \1, \"name\":\"JavaBook\",\"price\":\350.00\"}");

			//2.execute and get result
			MvcResult result = mockMvc.perform(request).andReturn();

			//3.read and responce
			MockHttpServletResponse responce= result.getResponse();
			//4.validate it
			assertEquals(HttpStatus.CREATED.value(),responce.getStatus());
			assertNotNull(responce.getContentAsString());
			if(!responce.getContentAsString().contains("created")) {

				fail("May not be saved");
			}  
		}
		/*
		 * @Test
		 * 
		 * @Order(2)
		 * 
		 * @DisplayName("ALL EMPLOYEE PATCH") public void TestGetAllEmployee() throws
		 * Exception { //1.Create one Http Request MockHttpServletRequestBuilder
		 * request= MockMvcRequestBuilders.get("/rest/employee/all");
		 * 
		 * //2.execute and get result MvcResult result =
		 * mockMvc.perform(request).andReturn(); //3.read and responce
		 * MockHttpServletResponse responce= result.getResponse(); //4.validate it
		 * assertEquals(HttpStatus.OK.value(),responce.getStatus());
		 * assertNotNull(responce.getContentAsString());
		 * assertEquals(MediaType.APPLICATION_JSON_VALUE,responce.getContentType());
		 * 
		 * }
		 * 
		 * @Test
		 * 
		 * @Order(3)
		 * 
		 * @DisplayName("PATCH ONE ROW BY ID-EXISTED DATA ") public void
		 * testFetchOneEmployeeExist() throws Exception { //1.Create one Http Request
		 * MockHttpServletRequestBuilder request=
		 * MockMvcRequestBuilders.get("/rest/employee/find/{id}",2); //2.execute and get
		 * result MvcResult result = mockMvc.perform(request).andReturn(); //3.read and
		 * responce MockHttpServletResponse responce= result.getResponse(); //4.validate
		 * it assertEquals(HttpStatus.OK.value(),responce.getStatus());
		 * assertNotNull(responce.getContentAsString());
		 * assertEquals(MediaType.APPLICATION_JSON_VALUE,responce.getContentType());
		 * 
		 * }
		 * 
		 * @Test
		 * 
		 * @Order(4)
		 * 
		 * @DisplayName("PATCH ONE ROW BY ID-NOT EXISTED ")
		 * 
		 * public void testFetchOneEmployeeNotExist() throws Exception { //1.Create one
		 * Http Request MockHttpServletRequestBuilder request=
		 * MockMvcRequestBuilders.get("/rest/employee/find/{id}",9); //2.execute and get
		 * MvcResult result = mockMvc.perform(request).andReturn(); //3.read and
		 * MockHttpServletResponse responce= result.getResponse(); //4.validate it
		 * 
		 * assertEquals(HttpStatus.INTERNAL_SERVER_ERROR.value(),responce.getStatus());
		 * assertEquals(MediaType.APPLICATION_JSON_VALUE,responce.getContentType());
		 * if(responce.getContentAsString().contains("DATA NOT FOUND")) {
		 * fail("MAY BE GIVEN ID EXIST!!");
		 * 
		 * } }
		 * 
		 * @Test
		 * 
		 * @Order(5)
		 * 
		 * @DisplayName("REMOVE ONE ROW BY-ID EXISTED") public void
		 * testRemoveOneEmployeeExist() throws Exception { //1.Create one Http Request
		 * MockHttpServletRequestBuilder request=
		 * MockMvcRequestBuilders.delete("/rest/employee/remove/{id}",2); //2.execute
		 * and get MvcResult result = mockMvc.perform(request).andReturn(); //3.read and
		 * MockHttpServletResponse responce= result.getResponse(); //4.validate it
		 * assertEquals(HttpStatus.OK.value(),responce.getStatus());
		 * if(responce.getContentAsString().contains("deleted")) {
		 * fail("MAY BE GIVE ID NOT EXIST");
		 * 
		 * } }
		 */
}
