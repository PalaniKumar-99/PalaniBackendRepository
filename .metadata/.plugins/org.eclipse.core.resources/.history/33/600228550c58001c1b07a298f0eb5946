/*
 * package com.book.example.demo;
 * 
 * import static org.junit.jupiter.api.Assertions.assertEquals; import static
 * org.junit.jupiter.api.Assertions.assertNotNull; import static
 * org.junit.jupiter.api.Assertions.fail;
 * 
 * import org.junit.jupiter.api.DisplayName; import org.junit.jupiter.api.Order;
 * import org.junit.jupiter.api.Test; import
 * org.springframework.beans.factory.annotation.Autowired; import
 * org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
 * import org.springframework.boot.test.context.SpringBootTest; import
 * org.springframework.boot.test.context.SpringBootTest.WebEnvironment; import
 * org.springframework.http.HttpStatus; import
 * org.springframework.http.MediaType; import
 * org.springframework.mock.web.MockHttpServletResponse; import
 * org.springframework.test.context.TestPropertySource; import
 * org.springframework.test.web.servlet.MockMvc; import
 * org.springframework.test.web.servlet.MvcResult; import
 * org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
 * import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
 * 
 * @SpringBootTest(webEnvironment = WebEnvironment.MOCK)
 * 
 * @AutoConfigureMockMvc
 * 
 * @TestPropertySource("classpath:application.properties") class
 * BookFactoryApplicationTests {
 * 
 * 
 * @Autowired private MockMvc mockMvc;
 * 
 * // private RequestBuilder request;
 * 
 * @Test
 * 
 * @Order(1)
 * 
 * @DisplayName("Book Name") public void addBooksTest() throws Exception {
 * 
 * //1.Create one Http Request
 * 
 * MockHttpServletRequestBuilder request=
 * MockMvcRequestBuilders.post("/books/save")
 * .contentType(MediaType.APPLICATION_JSON)
 * .content("{\"id\": \1, \"name\":\"JavaBook\",\"price\":\350.00\"}");
 * 
 * //2.execute and get result MvcResult result =
 * mockMvc.perform(request).andReturn();
 * 
 * //3.read and responce MockHttpServletResponse responce= result.getResponse();
 * //4.validate it
 * assertEquals(HttpStatus.CREATED.value(),responce.getStatus());
 * assertNotNull(responce.getContentAsString());
 * if(!responce.getContentAsString().contains("created")) {
 * 
 * fail("May not be saved"); } }
 * 
 * @Test
 * 
 * @Order(2)
 * 
 * @DisplayName("ALL EMPLOYEE PATCH") public void TestGetAllEmployee() throws
 * Exception { //1.Create one Http Request MockHttpServletRequestBuilder
 * request= MockMvcRequestBuilders.get("/rest/employee/all");
 * 
 * //2.execute and get result MvcResult result =
 * mockMvc.perform(request).andReturn(); //3.read and responce
 * MockHttpServletResponse responce= result.getResponse(); //4.validate it
 * assertEquals(HttpStatus.OK.value(),responce.getStatus());
 * assertNotNull(responce.getContentAsString());
 * assertEquals(MediaType.APPLICATION_JSON_VALUE,responce.getContentType());
 * 
 * }
 * 
 * @Test
 * 
 * @Order(3)
 * 
 * @DisplayName("PATCH ONE ROW BY ID-EXISTED DATA ") public void
 * testFetchOneEmployeeExist() throws Exception { //1.Create one Http Request
 * MockHttpServletRequestBuilder request=
 * MockMvcRequestBuilders.get("/rest/employee/find/{id}",2); //2.execute and get
 * result MvcResult result = mockMvc.perform(request).andReturn(); //3.read and
 * responce MockHttpServletResponse responce= result.getResponse(); //4.validate
 * it assertEquals(HttpStatus.OK.value(),responce.getStatus());
 * assertNotNull(responce.getContentAsString());
 * assertEquals(MediaType.APPLICATION_JSON_VALUE,responce.getContentType());
 * 
 * }
 * 
 * @Test
 * 
 * @Order(4)
 * 
 * @DisplayName("PATCH ONE ROW BY ID-NOT EXISTED ")
 * 
 * public void testFetchOneEmployeeNotExist() throws Exception { //1.Create one
 * Http Request MockHttpServletRequestBuilder request=
 * MockMvcRequestBuilders.get("/rest/employee/find/{id}",9); //2.execute and get
 * MvcResult result = mockMvc.perform(request).andReturn(); //3.read and
 * MockHttpServletResponse responce= result.getResponse(); //4.validate it
 * 
 * assertEquals(HttpStatus.INTERNAL_SERVER_ERROR.value(),responce.getStatus());
 * assertEquals(MediaType.APPLICATION_JSON_VALUE,responce.getContentType());
 * if(responce.getContentAsString().contains("DATA NOT FOUND")) {
 * fail("MAY BE GIVEN ID EXIST!!");
 * 
 * } }
 * 
 * @Test
 * 
 * @Order(5)
 * 
 * @DisplayName("REMOVE ONE ROW BY-ID EXISTED") public void
 * testRemoveOneEmployeeExist() throws Exception { //1.Create one Http Request
 * MockHttpServletRequestBuilder request=
 * MockMvcRequestBuilders.delete("/rest/employee/remove/{id}",2); //2.execute
 * and get MvcResult result = mockMvc.perform(request).andReturn(); //3.read and
 * MockHttpServletResponse responce= result.getResponse(); //4.validate it
 * assertEquals(HttpStatus.OK.value(),responce.getStatus());
 * if(responce.getContentAsString().contains("deleted")) {
 * fail("MAY BE GIVE ID NOT EXIST");
 * 
 * } }
 * 
 * }
 */















package com.book.example.demo;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import com.book.example.demo.controller.BookStoreController;
import com.book.example.demo.model.BookStore;
import com.book.example.demo.repository.BookStoreRepository;
import com.book.example.demo.service.BookStoreService;
import com.fasterxml.jackson.databind.ObjectMapper;

@WebMvcTest(BookStoreController.class)
public class BookFactoryApplicationTests {
	
	@Autowired
	private MockMvc mockMvc;
	
	@MockBean
	private BookStoreService bookService;
	
	@MockBean
	private BookStoreRepository bookRepository;
	
	@Test
	public void testgetBook() throws Exception {
		List<BookStore> listBook = new ArrayList<>();
		
		listBook.add(new BookStore(23,"JavaBook",350.0));
		listBook.add(new BookStore(45,"javascript",250.0));
		
		Mockito.when(bookService.getBooks()).thenReturn(listBook);
		mockMvc.perform(get("/getbooks")).andExpect(status().isOk());
	}
	
	@Test
	public void testaddBook() throws Exception {
		BookStore book = new BookStore();
		book.setId(1);
		book.setName("java");
		book.setPrice(250.0);
			
			mockMvc.perform(post("/book").contentType(MediaType.APPLICATION_JSON_UTF8)
						.content(asJsonString(book))
						.accept(MediaType.APPLICATION_JSON))
				.andExpect(status().isOk());
	    }
	
	@Test
	public void testupdateBook() throws Exception {
//		Book book = new Book();
//		book.setId(1);
//		book.setBookName("java");
//		book.setAuthorName("goslin");
//		bookRepository.save(book);
//		mockMvc.perform(put("/book/{id}"))
//		.andExpect(status().isOk());
		
//		testaddBook();
//		Book book=bookRepository.findById(1).get();
//		book.setBookName("java");
//		book.setAuthorName("goslin");
//		assertEquals(true, bookService.updateBook(book));
		
		String bookName = "Kindle Reader";
		Book book = new Book(bookName , "Amezon");
		book.setId(4);
		bookRepository.save(book);
//	    Book updatedProduct = bookRepository.findById(4);
//	    assertThat(updatedProduct.getBookName()).isEqualTo(bookName);
		mockMvc.perform(put("/book/{id}").contentType(MediaType.APPLICATION_JSON_UTF8)
				.content(asJsonString(book))
				.accept(MediaType.APPLICATION_JSON))
		.andExpect(status().isOk());
		
	}
	
	


	public static String asJsonString(final Object obj) {
        try {
            final ObjectMapper mapper = new ObjectMapper();
            final String jsonContent = mapper.writeValueAsString(obj);
            return jsonContent;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}